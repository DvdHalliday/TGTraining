#pragma once

template<typename T>
class TDynamicArray
{
private:
	int Size = 0;
	int Capacity = 1;
	T* Data = new T[Capacity];

	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	void CopyData(int NewCapacity)
	{
		T* NewData = new T[NewCapacity];

		for (int i = 0; i < Size; i++)
		{
			NewData[i] = Data[i];
		}

		Capacity = NewCapacity;

		delete[] Data;
		Data = NewData;
		NewData = nullptr;
	}

public:
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	TDynamicArray() {}
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	~TDynamicArray()
	{
		delete[] Data;
		Data = nullptr;
	}
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	T& operator[](int Index)
	{
		return Data[Index];
	}
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	const T& operator[](int Index) const
	{
		return Data[Index];
	}
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	T& Front()
	{
		return Data[0];
	}
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	const T& Front() const
	{
		return Data[0];
	}
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	T& Back()
	{
		return Data[Size - 1];
	}
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	const T& Back() const
	{
		return Data[Size - 1];
	}
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	T* GetData()
	{
		return &Data[0];
	}
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	const T* GetData() const
	{
		return &Data[0];
	}
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	bool IsEmpty() const
	{
		return Size == 0;
	}
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	int GetSize() const
	{
		return Size;
	}
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	int GetCapacity() const
	{
		return Capacity;
	}
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	void Reserve(const int NewCapacity)
	{
		if (NewCapacity > Capacity)
		{
			CopyData(NewCapacity);
		}
	}
	//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	void ShrinkToFit()
	{
		if (Capacity > Size)
		{
			CopyData(Size);
		}
	}
	
};
